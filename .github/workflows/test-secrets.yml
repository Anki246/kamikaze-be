name: Test GitHub Secrets

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - aws
        - all

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    steps:
    - name: üîç Test Basic Secrets Availability
      run: |
        echo "=== Testing GitHub Secrets Availability ==="
        
        # Test AWS credentials
        if [ -n "$AWS_ACCESS_KEY_ID" ]; then
          echo "‚úÖ AWS_ACCESS_KEY_ID is available (length: ${#AWS_ACCESS_KEY_ID})"
          echo "   First 4 chars: ${AWS_ACCESS_KEY_ID:0:4}****"
        else
          echo "‚ùå AWS_ACCESS_KEY_ID is NOT available"
        fi
        
        if [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "‚úÖ AWS_SECRET_ACCESS_KEY is available (length: ${#AWS_SECRET_ACCESS_KEY})"
        else
          echo "‚ùå AWS_SECRET_ACCESS_KEY is NOT available"
        fi
        
        if [ -n "$AWS_KEY_PAIR_NAME" ]; then
          echo "‚úÖ AWS_KEY_PAIR_NAME is available: $AWS_KEY_PAIR_NAME"
        else
          echo "‚ùå AWS_KEY_PAIR_NAME is NOT available"
        fi
        
        # Test application secrets
        if [ -n "$GROQ_API_KEY" ]; then
          echo "‚úÖ GROQ_API_KEY is available (length: ${#GROQ_API_KEY})"
          echo "   First 8 chars: ${GROQ_API_KEY:0:8}****"
        else
          echo "‚ùå GROQ_API_KEY is NOT available"
        fi
        
        if [ -n "$JWT_SECRET_STAGING" ]; then
          echo "‚úÖ JWT_SECRET_STAGING is available (length: ${#JWT_SECRET_STAGING})"
        else
          echo "‚ùå JWT_SECRET_STAGING is NOT available"
        fi
        
        # Test database secrets
        if [ -n "$RDS_MASTER_PASSWORD" ]; then
          echo "‚úÖ RDS_MASTER_PASSWORD is available (length: ${#RDS_MASTER_PASSWORD})"
        else
          echo "‚ùå RDS_MASTER_PASSWORD is NOT available"
        fi
        
        echo ""
        echo "=== Summary ==="
        
        # Count available secrets
        available=0
        total=6
        
        [ -n "$AWS_ACCESS_KEY_ID" ] && ((available++))
        [ -n "$AWS_SECRET_ACCESS_KEY" ] && ((available++))
        [ -n "$AWS_KEY_PAIR_NAME" ] && ((available++))
        [ -n "$GROQ_API_KEY" ] && ((available++))
        [ -n "$JWT_SECRET_STAGING" ] && ((available++))
        [ -n "$RDS_MASTER_PASSWORD" ] && ((available++))
        
        echo "Secrets available: $available/$total"
        
        if [ $available -eq $total ]; then
          echo "üéâ All required secrets are configured!"
          echo "‚úÖ Ready to run the main CI/CD pipeline"
        else
          echo "‚ö†Ô∏è  Some secrets are missing"
          echo "‚ùå Please add missing secrets before running main pipeline"
          exit 1
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_KEY_PAIR_NAME: ${{ secrets.AWS_KEY_PAIR_NAME }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        JWT_SECRET_STAGING: ${{ secrets.JWT_SECRET_STAGING }}
        RDS_MASTER_PASSWORD: ${{ secrets.RDS_MASTER_PASSWORD }}

    - name: üîß Test AWS Credentials (if available)
      if: ${{ github.event.inputs.test_type == 'aws' || github.event.inputs.test_type == 'all' }}
      run: |
        echo "=== Testing AWS Credentials ==="
        
        if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "‚úÖ AWS credentials are available, testing connection..."
          
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip > /dev/null 2>&1
          sudo ./aws/install > /dev/null 2>&1
          
          # Configure AWS CLI
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set region "us-east-1"
          aws configure set output "json"
          
          # Test AWS connection
          if aws sts get-caller-identity; then
            echo "‚úÖ AWS credentials are working!"
            
            # Test specific permissions
            echo ""
            echo "Testing AWS permissions..."
            
            if aws ec2 describe-regions --max-items 1 > /dev/null 2>&1; then
              echo "‚úÖ EC2 permissions working"
            else
              echo "‚ùå EC2 permissions failed"
            fi
            
            if aws secretsmanager list-secrets --max-items 1 > /dev/null 2>&1; then
              echo "‚úÖ Secrets Manager permissions working"
            else
              echo "‚ùå Secrets Manager permissions failed"
            fi
            
            if aws cloudformation list-stacks --max-items 1 > /dev/null 2>&1; then
              echo "‚úÖ CloudFormation permissions working"
            else
              echo "‚ùå CloudFormation permissions failed"
            fi
            
          else
            echo "‚ùå AWS credentials are not working"
            echo "Please check your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY"
            exit 1
          fi
        else
          echo "‚ùå AWS credentials not available for testing"
          exit 1
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: üéâ Success Summary
      if: success()
      run: |
        echo "=== Test Results ==="
        echo "‚úÖ All secrets are properly configured"
        echo "‚úÖ GitHub repository secrets are accessible"
        echo "‚úÖ Ready to run the main CI/CD pipeline"
        echo ""
        echo "Next steps:"
        echo "1. Go to Actions tab"
        echo "2. Run 'Enhanced CI Pipeline with AWS Integration'"
        echo "3. Monitor the AWS Secrets Manager integration step"
        echo "4. Verify infrastructure deployment"

    - name: ‚ùå Failure Summary
      if: failure()
      run: |
        echo "=== Test Failed ==="
        echo "‚ùå Some secrets are not properly configured"
        echo ""
        echo "Please check:"
        echo "1. Go to repository Settings ‚Üí Secrets and variables ‚Üí Actions"
        echo "2. Verify all required secrets are added with correct names"
        echo "3. Check for typos in secret names (case sensitive)"
        echo "4. Ensure secret values don't have extra spaces"
        echo ""
        echo "Required secrets:"
        echo "- AWS_ACCESS_KEY_ID"
        echo "- AWS_SECRET_ACCESS_KEY"
        echo "- AWS_KEY_PAIR_NAME"
        echo "- GROQ_API_KEY"
        echo "- JWT_SECRET_STAGING"
        echo "- RDS_MASTER_PASSWORD"
