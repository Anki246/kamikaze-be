name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, develop ]
  pull_request:
    branches: [ main, dev, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.12-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.12-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
        pip install -r requirements.txt

    - name: Code formatting check
      run: |
        echo "üé® Checking code formatting with Black..."
        black --check --diff --color . || echo "‚ö†Ô∏è Code formatting issues found (non-blocking)"

    - name: Import sorting check
      run: |
        echo "üì¶ Checking import sorting with isort..."
        isort --check-only --diff --color . || echo "‚ö†Ô∏è Import sorting issues found (non-blocking)"

    - name: Linting
      run: |
        echo "üîç Running Flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Critical linting issues found (non-blocking)"
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=88 --statistics

    - name: Validate project structure
      run: |
        echo "üìÅ Validating project structure..."
        test -f "app.py" || (echo "‚ùå app.py missing" && exit 1)
        test -f "requirements.txt" || (echo "‚ùå requirements.txt missing" && exit 1)
        test -f "Dockerfile" || (echo "‚ùå Dockerfile missing" && exit 1)
        test -d "src" || (echo "‚ùå src directory missing" && exit 1)
        echo "‚úÖ Project structure validated"

    - name: Validate configuration
      run: |
        echo "‚öôÔ∏è Validating configuration files..."
        if [ -f "config.json" ]; then
          python -c "import json; config = json.load(open('config.json')); print('‚úÖ Config loaded successfully')"
        else
          echo "‚ö†Ô∏è config.json not found, skipping validation"
        fi
        echo "‚úÖ Configuration validation completed"

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t kamikaze-ai:${{ github.sha }} .
        docker build -t kamikaze-ai:latest .

    - name: Test Docker image
      run: |
        echo "üß™ Testing Docker image..."
        docker run --rm kamikaze-ai:latest python --version
        docker run --rm kamikaze-ai:latest python -c "import json; print('‚úÖ Python works')"

    - name: Save Docker image
      run: |
        echo "üíæ Saving Docker image..."
        docker save kamikaze-ai:latest | gzip > kamikaze-ai-latest.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: kamikaze-ai-latest.tar.gz
        retention-days: 1

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key

    - name: Deploy to staging EC2
      run: |
        echo "üöÄ Deploying to staging EC2 instance..."
        scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no kamikaze-ai-latest.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }}:/tmp/
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} \
          "docker load -i /tmp/kamikaze-ai-latest.tar.gz && \
           docker stop kamikaze-ai || true && \
           docker rm kamikaze-ai || true && \
           docker run -d --name kamikaze-ai -p 8000:8000 -e PORT=8000 -e DEPLOYMENT_ENV=staging kamikaze-ai:latest"

    - name: Verify staging deployment
      run: |
        echo "üîç Verifying staging EC2 deployment..."
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} \
          "docker ps | grep kamikaze-ai && \
           docker inspect kamikaze-ai && \
           curl -s localhost:8000/health && \
           docker logs kamikaze-ai | head -n 20"

  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key

    - name: Deploy to production EC2
      run: |
        echo "üöÄ Deploying to production EC2 instance..."
        scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no kamikaze-ai-latest.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }}:/tmp/
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} \
          "docker load -i /tmp/kamikaze-ai-latest.tar.gz && \
           docker stop kamikaze-ai-prod || true && \
           docker rm kamikaze-ai-prod || true && \
           docker run -d --name kamikaze-ai-prod -p 8000:8000 -e PORT=8000 -e DEPLOYMENT_ENV=production kamikaze-ai:latest"

    - name: Verify production deployment
      run: |
        echo "üîç Verifying production EC2 deployment..."
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_PUBLIC_IP }} \
          "docker ps | grep kamikaze-ai-prod && \
           docker inspect kamikaze-ai-prod && \
           curl -s localhost:8000/health && \
           docker logs kamikaze-ai-prod | head -n 20"