name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and validation job - runs code quality checks and dependency installation
  build-and-validate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.12-${{ hashFiles('''**/requirements.txt''') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.12-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        # Install TA-Lib system library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install numpy first (required for TA-Lib)
        pip install numpy
        # Then install project dependencies
        pip install -r requirements.txt

    - name: Code formatting check
      run: |
        echo "üé® Checking code formatting with Black..."
        black --check --diff --color . || echo "‚ö†Ô∏è Code formatting issues found (non-blocking)"

    - name: Import sorting check
      run: |
        echo "üì¶ Checking import sorting with isort..."
        isort --check-only --diff --color . || echo "‚ö†Ô∏è Import sorting issues found (non-blocking)"

    - name: Linting
      run: |
        echo "üîç Running Flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Critical linting issues found (non-blocking)"
        flake8 . --count --exit-zero --max-complexity=15 --max-line-length=88 --statistics

    - name: Validate project structure
      run: |
        echo "üìÅ Validating project structure..."
        test -f "app.py" || (echo "‚ùå app.py missing" && exit 1)
        test -f "requirements.txt" || (echo "‚ùå requirements.txt missing" && exit 1)
        test -f "Dockerfile" || (echo "‚ùå Dockerfile missing" && exit 1)
        test -d "src" || (echo "‚ùå src directory missing" && exit 1)
        echo "‚úÖ Project structure validated"

    - name: Validate configuration
      run: |
        echo "‚öôÔ∏è Validating configuration files..."
        if [ -f "config.json" ]; then
          python -c "import json; config = json.load(open('''config.json''')); print('''‚úÖ Config loaded successfully''')"
        else
          echo "‚ö†Ô∏è config.json not found, skipping validation"
        fi
        echo "‚úÖ Configuration validation completed"