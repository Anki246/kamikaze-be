name: Debug GitHub Secrets

on:
  workflow_dispatch:
  push:
    branches: [dev]
    paths: ['.github/workflows/debug-secrets.yml']

jobs:
  debug-secrets:
    runs-on: ubuntu-latest
    steps:
    - name: üîç Debug Repository Secrets
      run: |
        echo "=== GitHub Secrets Debug Information ==="
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo ""
        
        echo "=== Testing Secret Availability ==="
        
        # Test each secret individually
        if [ -n "$AWS_ACCESS_KEY_ID" ]; then
          echo "‚úÖ AWS_ACCESS_KEY_ID is available (length: ${#AWS_ACCESS_KEY_ID})"
          echo "   First 4 chars: ${AWS_ACCESS_KEY_ID:0:4}****"
        else
          echo "‚ùå AWS_ACCESS_KEY_ID is NOT available"
        fi
        
        if [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "‚úÖ AWS_SECRET_ACCESS_KEY is available (length: ${#AWS_SECRET_ACCESS_KEY})"
        else
          echo "‚ùå AWS_SECRET_ACCESS_KEY is NOT available"
        fi
        
        if [ -n "$GROQ_API_KEY" ]; then
          echo "‚úÖ GROQ_API_KEY is available (length: ${#GROQ_API_KEY})"
          echo "   First 8 chars: ${GROQ_API_KEY:0:8}****"
        else
          echo "‚ùå GROQ_API_KEY is NOT available"
        fi
        
        if [ -n "$RDS_MASTER_PASSWORD" ]; then
          echo "‚úÖ RDS_MASTER_PASSWORD is available (length: ${#RDS_MASTER_PASSWORD})"
        else
          echo "‚ùå RDS_MASTER_PASSWORD is NOT available"
        fi
        
        echo ""
        echo "=== Environment Information ==="
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_ACTOR: $GITHUB_ACTOR"
        echo "GITHUB_TOKEN available: $([ -n "$GITHUB_TOKEN" ] && echo "Yes" || echo "No")"
        
        echo ""
        echo "=== Secret Context Test ==="
        echo "Testing secrets context access..."
        
        # Count available secrets
        available=0
        total=4
        
        [ -n "$AWS_ACCESS_KEY_ID" ] && ((available++))
        [ -n "$AWS_SECRET_ACCESS_KEY" ] && ((available++))
        [ -n "$GROQ_API_KEY" ] && ((available++))
        [ -n "$RDS_MASTER_PASSWORD" ] && ((available++))
        
        echo "Secrets available: $available/$total"
        
        if [ $available -eq 0 ]; then
          echo ""
          echo "üö® CRITICAL: No secrets are available!"
          echo "This indicates a repository secrets configuration issue."
          echo ""
          echo "Possible causes:"
          echo "1. Secrets not added to repository"
          echo "2. Incorrect secret names (case sensitive)"
          echo "3. Repository permissions issue"
          echo "4. Organization-level restrictions"
          echo ""
          echo "SOLUTION:"
          echo "1. Go to: https://github.com/$GITHUB_REPOSITORY/settings/secrets/actions"
          echo "2. Verify you can access the secrets page"
          echo "3. Add the required secrets with EXACT names"
          echo "4. Re-run this workflow to verify"
          
          exit 1
        elif [ $available -lt $total ]; then
          echo ""
          echo "‚ö†Ô∏è WARNING: Some secrets are missing"
          echo "Please add the missing secrets to continue"
        else
          echo ""
          echo "üéâ SUCCESS: All required secrets are available!"
          echo "The main CI/CD pipeline should work correctly now"
        fi
        
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        RDS_MASTER_PASSWORD: ${{ secrets.RDS_MASTER_PASSWORD }}

    - name: üîß Test AWS Authentication (if credentials available)
      if: env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != ''
      run: |
        echo "=== Testing AWS Authentication ==="
        
        # Install AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip > /dev/null 2>&1
        sudo ./aws/install > /dev/null 2>&1
        
        # Configure AWS CLI
        aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
        aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
        aws configure set region "us-east-1"
        aws configure set output "json"
        
        # Test AWS connection
        echo "Testing AWS connection..."
        if aws sts get-caller-identity; then
          echo "‚úÖ AWS authentication successful!"
          
          # Test Secrets Manager access
          echo ""
          echo "Testing Secrets Manager access..."
          if aws secretsmanager list-secrets --max-items 1 > /dev/null 2>&1; then
            echo "‚úÖ Secrets Manager access working"
          else
            echo "‚ùå Secrets Manager access failed"
          fi
          
        else
          echo "‚ùå AWS authentication failed"
          echo "Please check your AWS credentials"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: üìã Next Steps
      run: |
        echo "=== Next Steps ==="
        echo ""
        if [ -z "$AWS_ACCESS_KEY_ID" ]; then
          echo "üîß IMMEDIATE ACTION REQUIRED:"
          echo "1. Go to: https://github.com/$GITHUB_REPOSITORY/settings/secrets/actions"
          echo "2. Click 'New repository secret'"
          echo "3. Add these EXACT secrets:"
          echo "   - Name: AWS_ACCESS_KEY_ID"
          echo "   - Name: AWS_SECRET_ACCESS_KEY"
          echo "   - Name: GROQ_API_KEY"
          echo "   - Name: RDS_MASTER_PASSWORD"
          echo "4. Re-run this workflow to verify"
          echo ""
          echo "üìû If you can't access the secrets page:"
          echo "- Make sure you have admin access to the repository"
          echo "- Check if you're the repository owner"
          echo "- Verify no organization restrictions are in place"
        else
          echo "‚úÖ Secrets are configured correctly!"
          echo "You can now run the main CI/CD pipeline successfully."
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
