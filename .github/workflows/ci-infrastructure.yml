name: üöÄ Kamikaze-be Infrastructure & Deployment

on:
  push:
    branches: [ main, master, dev, develop, cicd-be ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, master, dev, develop, cicd-be ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - cicd-be
        - main
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      require_approval:
        description: 'Require manual approval before deployment'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: 'us-east-1'
  CACHE_VERSION: 'v1'
  # Application Configuration
  APP_NAME: 'kamikaze-be'
  APP_PORT: '8000'
  SECRETS_NAME: 'kmkz-secrets'

jobs:
  # Job 1: Branch Detection and Environment Setup
  branch-detection:
    name: üîç Branch Detection & Environment Setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      requires_approval: ${{ steps.detect.outputs.requires_approval }}
      branch_name: ${{ steps.detect.outputs.branch_name }}
    
    steps:
    - name: üîç Detect branch and set environment
      id: detect
      run: |
        # Get branch name
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          BRANCH_NAME="${{ github.event.inputs.target_branch }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REQUIRES_APPROVAL="${{ github.event.inputs.require_approval }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
          # Auto-detect environment based on branch
          case "$BRANCH_NAME" in
            "main"|"master")
              ENVIRONMENT="production"
              REQUIRES_APPROVAL="true"
              ;;
            "cicd-be")
              ENVIRONMENT="staging"
              REQUIRES_APPROVAL="true"
              ;;
            "dev"|"develop")
              ENVIRONMENT="development"
              REQUIRES_APPROVAL="false"
              ;;
            *)
              ENVIRONMENT="development"
              REQUIRES_APPROVAL="false"
              ;;
          esac
        fi
        
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "requires_approval=$REQUIRES_APPROVAL" >> $GITHUB_OUTPUT
        
        echo "üåü Branch: $BRANCH_NAME"
        echo "üèóÔ∏è Environment: $ENVIRONMENT"
        echo "üîê Requires Approval: $REQUIRES_APPROVAL"

  # Job 2: Manual Approval (for main and cicd-be branches)
  approval:
    name: üîê Manual Approval Required
    runs-on: ubuntu-latest
    needs: branch-detection
    if: needs.branch-detection.outputs.requires_approval == 'true'
    environment: ${{ needs.branch-detection.outputs.environment }}
    
    steps:
    - name: üîê Waiting for manual approval
      run: |
        echo "üîê Manual approval required for deployment to ${{ needs.branch-detection.outputs.environment }}"
        echo "üåü Branch: ${{ needs.branch-detection.outputs.branch_name }}"
        echo "‚úÖ Approval granted - proceeding with deployment"

  # Job 3: Build and Test
  build-and-test:
    name: üèóÔ∏è Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [branch-detection, approval]
    if: always() && (needs.branch-detection.outputs.requires_approval == 'false' || needs.approval.result == 'success')
    environment: ${{ needs.branch-detection.outputs.environment }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black==23.3.0 isort==5.11.5
        pip install asyncpg psycopg2-binary
    
    - name: üîç Code quality checks
      run: |
        echo "üîç Running code quality checks..."
        black --check --diff .
        isort --check-only --diff .
        python -m py_compile src/api/main.py
        python -m py_compile src/infrastructure/database_config.py
        echo "‚úÖ Code quality checks passed"
    
    - name: üß™ Run tests
      run: |
        echo "üß™ Running tests..."
        python -c "
        import sys
        sys.path.insert(0, 'src')
        
        # Test critical imports
        try:
            from infrastructure.database_config import DatabaseConfig
            print('‚úÖ Database config import successful')
            
            from infrastructure.aws_secrets_manager import AWSSecretsManager
            print('‚úÖ AWS Secrets Manager import successful')
            
            print('‚úÖ All critical imports working')
        except Exception as e:
            print(f'‚ùå Import test failed: {e}')
            sys.exit(1)
        "

  # Job 4: Infrastructure Deployment
  deploy-infrastructure:
    name: üöÄ Deploy Infrastructure & Application
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [branch-detection, approval, build-and-test]
    if: always() && (needs.branch-detection.outputs.requires_approval == 'false' || needs.approval.result == 'success') && needs.build-and-test.result == 'success'
    environment: ${{ needs.branch-detection.outputs.environment }}

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: üèóÔ∏è Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "~1.0"

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üìã Display GitHub Secrets (for verification)
      run: |
        echo "üìã GitHub Secrets Retrieved (for AWS Secrets Manager):"
        echo "üîê Environment: ${{ needs.branch-detection.outputs.environment }}"
        echo ""
        echo "üìä Database Configuration:"
        echo "  DB_HOST: ${DB_HOST:0:20}... (length: ${#DB_HOST})"
        echo "  DB_PORT: $DB_PORT"
        echo "  DB_NAME: $DB_NAME"
        echo "  DB_USER: $DB_USER"
        echo "  DB_PASSWORD: ${DB_PASSWORD:0:3}... (length: ${#DB_PASSWORD})"
        echo ""
        echo "üîë AWS Configuration:"
        echo "  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:0:10}... (length: ${#AWS_ACCESS_KEY_ID})"
        echo "  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:0:10}... (length: ${#AWS_SECRET_ACCESS_KEY})"
        echo "  AWS_REGION: $AWS_DEFAULT_REGION"
        echo ""
        echo "üîê SSH Configuration:"
        echo "  EC2_SSH_PRIVATE_KEY: Available (length: ${#EC2_SSH_PRIVATE_KEY})"
        echo ""
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: üöÄ Deploy Infrastructure and Application
      env:
        ENVIRONMENT: ${{ needs.branch-detection.outputs.environment }}
        GITHUB_ACTIONS: true
        # Database credentials for Terraform and application
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        # SSH key for EC2 access
        EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        echo "üöÄ Starting Infrastructure-as-Code Deployment"
        echo "üåü Branch: ${{ needs.branch-detection.outputs.branch_name }}"
        echo "üèóÔ∏è Environment: ${{ needs.branch-detection.outputs.environment }}"
        
        # Extract public key from private key
        echo "üîë Setting up SSH keys..."
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Generate public key from private key
        ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
        export EC2_PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
        
        # Make deployment script executable
        chmod +x scripts/deploy-with-terraform.sh
        
        # Run infrastructure-as-code deployment
        ./scripts/deploy-with-terraform.sh

    - name: üè• Health Check
      run: |
        echo "üè• Performing health checks..."
        
        # Get EC2 public IP from Terraform output
        cd infrastructure/terraform
        EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "3.81.64.108")
        cd - > /dev/null
        
        echo "üéØ Target: http://$EC2_PUBLIC_IP:${{ env.APP_PORT }}"
        
        # Wait for application to start
        echo "‚è≥ Waiting for application to start..."
        sleep 30
        
        # Health check with retries
        for i in {1..10}; do
          echo "üîç Health check attempt $i/10..."
          
          if curl -f "http://$EC2_PUBLIC_IP:${{ env.APP_PORT }}/health" --connect-timeout 10 --max-time 30; then
            echo "‚úÖ Health check passed"
            break
          else
            echo "‚è≥ Health check failed, retrying in 15 seconds..."
            sleep 15
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Health checks failed after 10 attempts"
            exit 1
          fi
        done

  # Job 5: Deployment Summary
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [branch-detection, approval, build-and-test, deploy-infrastructure]
    if: always()

    steps:
    - name: üìã Generate Deployment Summary
      run: |
        echo "## üöÄ Kamikaze-be Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåü Deployment Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ needs.branch-detection.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.branch-detection.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Required Approval**: ${{ needs.branch-detection.outputs.requires_approval }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure Deployment | ${{ needs.deploy-infrastructure.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: http://3.81.64.108:8000" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: http://3.81.64.108:8000/health" >> $GITHUB_STEP_SUMMARY
        echo "- **API Docs**: http://3.81.64.108:8000/docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üèóÔ∏è Infrastructure Features" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Infrastructure-as-Code with Terraform" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ AWS Secrets Manager integration" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Docker containerization" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ RDS database with SSL" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Automated security group management" >> $GITHUB_STEP_SUMMARY
