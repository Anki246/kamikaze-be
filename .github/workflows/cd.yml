name: CD Pipeline

on:
  push:
    branches: [ main, dev ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main, dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') && (github.event_name == 'push' || github.event.workflow_run.conclusion == 'success')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
      continue-on-error: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        echo "üê≥ Building and pushing Docker image for staging..."

        # Determine tag based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          BRANCH_TAG="staging"
        else
          BRANCH_TAG="dev-staging"
        fi

        # Build image with appropriate tag
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_TAG} .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

        # Push images
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_TAG}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."

        # Determine deployment environment based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          BRANCH_TAG="staging"
          ENV_NAME="staging"
        else
          BRANCH_TAG="dev-staging"
          ENV_NAME="dev-staging"
        fi

        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: ${ENV_NAME}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_TAG}"
        echo "Commit: ${{ github.sha }}"

        # Simulate deployment (replace with actual deployment commands)
        echo "‚úÖ ${ENV_NAME} deployment completed"

        # Health check simulation
        echo "üè• Running health checks..."
        sleep 5
        echo "‚úÖ Health checks passed"

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging..."
        
        # Basic connectivity test
        echo "Testing basic connectivity..."
        
        # Configuration validation
        echo "Validating staging configuration..."
        python -c "import json; config = json.load(open('config.json')); print('‚úÖ Config valid')"
        
        echo "‚úÖ Smoke tests passed"

    - name: Notify deployment
      run: |
        echo "üì¢ Staging deployment notification"
        echo "Environment: Staging"
        echo "Version: ${{ github.sha }}"
        echo "Status: Success"

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push production image
      run: |
        echo "üê≥ Building and pushing Docker image for production..."
        
        # Build production image
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }} .
        
        # Push images
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ github.sha }}

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Commit: ${{ github.sha }}"
        
        # Simulate production deployment (replace with actual deployment commands)
        echo "‚úÖ Production deployment completed"
        
        # Health check
        echo "üè• Running production health checks..."
        sleep 10
        echo "‚úÖ Production health checks passed"

    - name: Run production tests
      run: |
        echo "üß™ Running production validation tests..."
        
        # Basic functionality test
        echo "Testing production functionality..."
        
        # Configuration validation
        echo "Validating production configuration..."
        python -c "import json; config = json.load(open('config.json')); print('‚úÖ Production config valid')"
        
        echo "‚úÖ Production tests passed"

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Release v${{ github.run_number }}
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ### Changes
          - Automated release from main branch
          - Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ### Deployment Status
          - ‚úÖ Staging: Deployed and tested
          - ‚úÖ Production: Deployed and validated
        draft: false
        prerelease: false

    - name: Notify production deployment
      run: |
        echo "üì¢ Production deployment notification"
        echo "Environment: Production"
        echo "Version: v${{ github.run_number }}"
        echo "Commit: ${{ github.sha }}"
        echo "Status: Success"
        echo "Release: Created"

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    environment: production

    steps:
    - name: Rollback deployment
      run: |
        echo "üîÑ Initiating rollback procedure..."
        echo "Previous deployment failed, rolling back to last known good state"
        
        # Simulate rollback (replace with actual rollback commands)
        echo "‚úÖ Rollback completed"
        
        # Notify about rollback
        echo "üì¢ Rollback notification sent"
