name: Deploy Kamikaze AI to AWS EC2

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  APPLICATION_NAME: kamikaze-ai
  DOCKER_IMAGE_NAME: kamikaze-ai-backend
  HEALTH_CHECK_URL: http://localhost:8000/health
  DEPLOYMENT_TIMEOUT: 300

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run syntax checks
      run: |
        python -m py_compile app.py
        python -m py_compile src/api/main.py
        python -m py_compile src/infrastructure/config_loader.py
        
    - name: Validate configuration files
      run: |
        python -c "import json; json.load(open('config.json'))"
        echo "‚úÖ Configuration files validated"
        
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8001:8000 \
          -e ENVIRONMENT=test \
          -e USE_AWS_SECRETS=false \
          ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Basic health check
        if docker ps | grep -q test-container; then
          echo "‚úÖ Docker container started successfully"
          docker stop test-container
        else
          echo "‚ùå Docker container failed to start"
          docker logs test-container
          exit 1
        fi
        
    - name: Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} | gzip > kamikaze-ai-image.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: kamikaze-ai-image.tar.gz
        retention-days: 1

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create deployment directory
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          sudo mkdir -p /opt/kamikaze-ai/releases/${{ github.sha }}
          sudo mkdir -p /opt/kamikaze-ai/shared/logs
          sudo chown -R $USER:$USER /opt/kamikaze-ai
        '
        
    - name: Upload application files
      run: |
        # Create deployment package
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='logs' \
          .
          
        # Upload to EC2
        scp -i ~/.ssh/id_rsa deployment.tar.gz \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/kamikaze-ai/releases/${{ github.sha }}/
          
        # Upload Docker image
        scp -i ~/.ssh/id_rsa kamikaze-ai-image.tar.gz \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/kamikaze-ai/releases/${{ github.sha }}/
          
    - name: Extract and prepare application
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          cd /opt/kamikaze-ai/releases/${{ github.sha }}
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Load Docker image
          docker load < kamikaze-ai-image.tar.gz
          rm kamikaze-ai-image.tar.gz
          
          # Create symlinks to shared resources
          ln -sf /opt/kamikaze-ai/shared/logs logs
          
          echo "‚úÖ Application prepared for deployment"
        '

    - name: Setup EC2 environment (one-time)
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "‚úÖ Docker installed"
          fi

          # Install required tools
          if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y curl jq
          elif command -v yum &> /dev/null; then
            sudo yum install -y curl jq
          fi

          echo "‚úÖ EC2 environment ready"
        '

    - name: Deploy with zero-downtime
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          set -e

          DOCKER_IMAGE="${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
          CONTAINER_NAME="kamikaze-ai-backend"

          echo "üöÄ Starting Kamikaze AI deployment..."

          # Function to check health
          check_health() {
            local max_attempts=30
            local attempt=1
            while [ $attempt -le $max_attempts ]; do
              if curl -f -s ${{ env.HEALTH_CHECK_URL }} > /dev/null 2>&1; then
                echo "‚úÖ Health check passed (attempt $attempt)"
                return 0
              fi
              echo "‚è≥ Retrying health check... ($attempt/$max_attempts)"
              sleep 10
              ((attempt++))
            done
            echo "‚ùå Health check failed"
            return 1
          }

          # Stop existing container gracefully
          if docker ps | grep -q $CONTAINER_NAME; then
            echo "üõë Stopping existing container..."
            docker stop $CONTAINER_NAME --time=30 || true
            docker rm $CONTAINER_NAME || true
          fi

          # Start new container
          echo "üöÄ Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 8000:8000 \
            -e ENVIRONMENT=production \
            -e USE_AWS_SECRETS=true \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_REGION || 'us-east-1' }} \
            -e LOG_LEVEL=INFO \
            -e ENABLE_FILE_LOGGING=true \
            -e MAX_LOG_FILES=10 \
            --log-driver=json-file \
            --log-opt max-size=100m \
            --log-opt max-file=5 \
            $DOCKER_IMAGE

          # Wait and health check
          echo "‚è≥ Waiting for container to start..."
          sleep 15

          if check_health; then
            echo "üéâ Deployment completed successfully!"

            # Clean up old images (keep last 3)
            docker images ${{ env.DOCKER_IMAGE_NAME }} --format "{{.Tag}}" | \
              grep -v latest | sort -r | tail -n +4 | \
              xargs -r -I {} docker rmi ${{ env.DOCKER_IMAGE_NAME }}:{} 2>/dev/null || true

            docker system prune -f
          else
            echo "‚ùå Deployment failed - health check unsuccessful"
            docker logs $CONTAINER_NAME --tail 50
            exit 1
          fi
        '



    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."

        # Check if container is running
        CONTAINER_STATUS=$(ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          docker ps --filter name=kamikaze-ai-backend --format "{{.Status}}"
        ')

        if [[ $CONTAINER_STATUS == *"Up"* ]]; then
          echo "‚úÖ Container is running: $CONTAINER_STATUS"
        else
          echo "‚ùå Container is not running properly"
          exit 1
        fi

        # Verify health endpoint
        HEALTH_CHECK=$(ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          curl -f -s ${{ env.HEALTH_CHECK_URL }} || echo "FAILED"
        ')

        if [[ $HEALTH_CHECK != "FAILED" ]]; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi

        # Check API info endpoint
        API_INFO=$(ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          curl -f -s http://localhost:8000/api/info | jq -r .message 2>/dev/null || echo "FAILED"
        ')

        if [[ $API_INFO == *"Kamikaze AI"* ]]; then
          echo "‚úÖ API is responding correctly: $API_INFO"
        else
          echo "‚ùå API is not responding correctly"
          exit 1
        fi

    - name: Update system services
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          # Update systemd service if it exists
          if systemctl is-enabled kamikaze-ai 2>/dev/null; then
            sudo systemctl daemon-reload
            sudo systemctl restart kamikaze-ai
            echo "‚úÖ Systemd service updated"
          fi

          # Update nginx configuration if needed
          if command -v nginx >/dev/null 2>&1; then
            sudo nginx -t && sudo systemctl reload nginx
            echo "‚úÖ Nginx configuration reloaded"
          fi
        '

    - name: Clean up deployment artifacts
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          # Clean up old Docker images (keep last 3)
          docker images ${{ env.DOCKER_IMAGE_NAME }} --format "{{.Tag}}" | \
            grep -v latest | sort -r | tail -n +4 | \
            xargs -r -I {} docker rmi ${{ env.DOCKER_IMAGE_NAME }}:{} 2>/dev/null || true

          # Clean up unused Docker resources
          docker system prune -f --volumes

          echo "‚úÖ Cleanup completed"
        '

    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="‚úÖ SUCCESS"
          COLOR="good"
          MESSAGE="Kamikaze AI backend deployed successfully to EC2"
        else
          STATUS="‚ùå FAILED"
          COLOR="danger"
          MESSAGE="Kamikaze AI backend deployment failed"
        fi

        echo "Deployment Status: $STATUS"
        echo "Message: $MESSAGE"

        # Add webhook notification here if needed
        # curl -X POST -H 'Content-type: application/json' \
        #   --data "{\"text\":\"$MESSAGE\", \"color\":\"$COLOR\"}" \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
    - name: Clean up artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name === 'docker-image') {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
          }
